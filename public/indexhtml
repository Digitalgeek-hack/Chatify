<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>jarix Chatify</title>
  <link rel="icon" type="image/x-icon" href="https://i.ibb.co/y01QqZQ/mrfrankofc.jpg">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    /* General Styles */
    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, #87CEEB, #ADD8E6);
      color: #333;
      transition: background 0.3s, color 0.3s;
    }

    body.dark-mode {
      background: linear-gradient(135deg, #1e1e2f, #2d2d44);
      color: #fff;
    }

    .container {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    /* Username Form */
    .username-form {
      background: rgba(255, 255, 255, 0.9);
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
      text-align: center;
      max-width: 400px;
      width: 100%;
    }

    .username-form h1 {
      margin-bottom: 20px;
      font-size: 2rem;
      color: #007bff;
    }

    .username-form input {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 1rem;
    }

    .username-form button {
      padding: 10px 20px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .username-form button:hover {
      background: #0056b3;
    }

    /* Chat Container */
    .chat-container {
      display: none;
      width: 500px;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 15px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
      overflow: hidden;
      flex-direction: column;
      height: 80vh;
      position: relative;
    }

    .chat-header {
      background: linear-gradient(135deg, #007bff, #00bfff);
      color: white;
      padding: 15px;
      text-align: center;
      font-size: 1.5rem;
    }

    .online-users {
      padding: 15px;
      background: #f9f9f9;
      border-bottom: 1px solid #ddd;
    }

    .online-users h3 {
      margin: 0 0 10px 0;
      font-size: 1.2rem;
      color: #007bff;
    }

    .online-users ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .online-users li {
      margin-bottom: 5px;
      color: #555;
    }

    .chat-messages {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      border-bottom: 1px solid #ddd;
      background: #f4f4f9;
    }

    .message {
      margin-bottom: 10px;
      padding: 10px;
      border-radius: 5px;
      background: white;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

    .message.sent {
      background: #007bff;
      color: white;
      align-self: flex-end;
    }

    .chat-input {
      display: flex;
      padding: 10px;
      background: #f9f9f9;
      position: sticky;
      bottom: 0;
    }

    .chat-input input {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      margin-right: 10px;
      font-size: 1rem;
    }

    .chat-input button {
      padding: 10px 20px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .chat-input button:hover {
      background: #0056b3;
    }

    /* Footer */
    footer {
      text-align: center;
      padding: 10px;
      background: #007bff;
      color: white;
      position: fixed;
      bottom: 0;
      width: 100%;
    }

    /* Loading Animation */
    .loading {
      display: none; /* Hidden by default */
      justify-content: center;
      align-items: center;
      height: 100%;
      font-size: 1.5rem;
      color: #007bff;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255, 255, 255, 0.9); /* Semi-transparent background */
      z-index: 10; /* Ensure it appears above other elements */
    }

    .loading::after {
      content: '';
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid #007bff;
      border-radius: 50%;
      border-top-color: transparent;
      animation: spin 1s linear infinite;
      margin-left: 10px;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    /* Dark Mode Toggle */
    .dark-mode-toggle {
      position: fixed;
      top: 20px;
      right: 20px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    /* Typing Indicator */
    .typing-indicator {
      font-size: 0.9rem;
      color: #555;
      margin-left: 10px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="username-form" id="username-form">
      <h1>Welcome to Chatify</h1>
      <input type="text" id="username-input" placeholder="Enter your username">
      <input type="file" id="profile-picture-input" accept="image/*" required>
      <button onclick="setUsername()">Join Chat</button>
    </div>

    <div class="chat-container" id="chat-container">
      <div class="chat-header">Chat Room</div>
      <div class="online-users">
        <h3>Online Users:</h3>
        <ul id="online-users-list"></ul>
      </div>
      <div class="chat-messages" id="chat-messages"></div>
      <div class="loading" id="loading">Loading chat history...</div> <!-- Loading animation -->
      <div class="chat-input">
        <input type="text" id="message-input" placeholder="Type a message..." oninput="handleTyping()">
        <button onclick="sendMessage()">Send</button>
      </div>
      <div id="typing-indicator" class="typing-indicator"></div>
    </div>
  </div>

  <footer>
    All rights reserved Mr Frank 2022-<span id="current-year"></span>
  </footer>

  <button class="dark-mode-toggle" onclick="toggleDarkMode()">
    <i class="fas fa-moon"></i>
  </button>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io(); // Connect to the server

    const usernameForm = document.getElementById('username-form');
    const chatContainer = document.getElementById('chat-container');
    const onlineUsersList = document.getElementById('online-users-list');
    const chatMessages = document.getElementById('chat-messages');
    const messageInput = document.getElementById('message-input');
    const profilePictureInput = document.getElementById('profile-picture-input');
    const currentYearSpan = document.getElementById('current-year');
    const loading = document.getElementById('loading');
    const typingIndicator = document.getElementById('typing-indicator');

    // Set current year in footer
    currentYearSpan.textContent = new Date().getFullYear();

    // Toggle dark mode
    function toggleDarkMode() {
      document.body.classList.toggle('dark-mode');
    }

    // Set username and join the chat
    function setUsername() {
      const username = document.getElementById('username-input').value.trim();
      const profilePicture = profilePictureInput.files[0];
      if (username && profilePicture) {
        const reader = new FileReader();
        reader.onload = function (e) {
          const profilePictureUrl = e.target.result;
          socket.emit('setUsername', { username, profilePictureUrl }); // Send username and profile picture to the server
          usernameForm.style.display = 'none'; // Hide the username form
          loading.style.display = 'flex'; // Show loading animation
          chatContainer.style.display = 'flex'; // Show the chat container
        };
        reader.readAsDataURL(profilePicture);
      } else {
        alert('Please enter a username and choose a profile picture.');
      }
    }

    // Handle typing indicator
    function handleTyping() {
      socket.emit('typing');
    }

    // Receive welcome message
    socket.on('welcome', (message) => {
      const welcomeMessage = document.createElement('div');
      welcomeMessage.classList.add('message');
      welcomeMessage.textContent = message;
      chatMessages.appendChild(welcomeMessage);
    });

    // Receive messages from the server
    socket.on('message', (data) => {
      const messageElement = document.createElement('div');
      messageElement.classList.add('message');
      messageElement.style.backgroundColor = data.color; // Set unique color for each user
      messageElement.innerHTML = `
        <img src="${data.profilePictureUrl || 'https://via.placeholder.com/30'}" alt="Profile Picture" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px;">
        <strong>${data.username}:</strong> ${data.message}
      `;
      chatMessages.appendChild(messageElement);
      chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll
    });

    // Update online users list
    socket.on('updateOnlineUsers', (users) => {
      onlineUsersList.innerHTML = users.map(user => `<li>${user}</li>`).join('');
    });

    // Load previous chat history
    socket.on('loadChatHistory', (messages) => {
      messages.forEach((data) => {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        messageElement.style.backgroundColor = data.color;
        messageElement.innerHTML = `
          <img src="${data.profilePictureUrl || 'https://via.placeholder.com/30'}" alt="Profile Picture" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px;">
          <strong>${data.username}:</strong> ${data.message}
        `;
        chatMessages.appendChild(messageElement);
      });
      chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll
      loading.style.display = 'none'; // Hide loading animation after chat history is loaded
    });

    // Show typing indicator
    socket.on('typing', (username) => {
      typingIndicator.textContent = `${username} is typing...`;
      setTimeout(() => {
        typingIndicator.textContent = '';
      }, 3000); // Clear typing indicator after 3 seconds
    });

    // Send a message to the server
    function sendMessage() {
      const message = messageInput.value.trim();
      if (message) {
        socket.emit('message', message); // Send message to the server
        messageInput.value = ''; // Clear input
      }
    }
  </script>
</body>
</html>
